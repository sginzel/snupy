// based on https://jqueryui.com/autocomplete/#combobox
//$( function() {
		$.widget( "custom.combobox", {
			
			//options: {
			//	validonly: true
			//},
 
			_create: function() {
				this.wrapper = $( "<span>" )
					.addClass( "custom-combobox" )
					.insertAfter( this.element );
				this.options.validonly = this.element.attr("validonly") == "1" || this.element.attr("validonly") == "";
				this.options.allowempty = this.element.attr("allowempty") == "1" || this.element.attr("allowempty") == "";
				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},
 
			_createHiddenField1: function() {
				var selected = this.element.children( ":selected" ),
					value = selected.val() ? selected.text() : "";
				var fieldid = this.element.attr("id");
				this.element.attr("orgid", fieldid);
				this.element.removeAttr("id");
 
				this.input = $( "<input>" )
					.appendTo( this.wrapper )
					.attr( "id", fieldid )
					.attr( "name", fieldid )
					.attr( "type", "hidden" )
					.val( value );
			},
 
			_setHiddenField1: function() {
				var fieldid = this.element.attr("orgid");
				var value = $(".custom-combobox-input", this.element.parent()).val();
				console.log("setting field " + fieldid + ": " + value);
				$( "#" + fieldid )
				.val( value );
			},
 
			_createAutocomplete: function() {
				var selected = this.element.children( ":selected" ),
					value = selected.val() ? selected.text() : "";
				var fieldid = this.element.attr("id");
				//var fieldid = this.element.attr("name");
 
				this.input = $( "<input name=" + fieldid + ">" )
					.appendTo( this.wrapper )
					.val( value )
					.attr( "title", "" )
					.addClass( "custom-combobox-input")// ui-widget ui-widget-content ui-state-default ui-corner-left" )
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy( this, "_source" )
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});
 
				this._on( this.input, {
					autocompleteselect: function( event, ui ) {
						ui.item.option.selected = true;
						this._trigger( "select", event, {
							item: ui.item.option
						});
					},
 
					autocompletechange: "_removeIfInvalid"
				});
			},
 
			_createShowAllButton: function() {
				var input = this.input,
					wasOpen = false;
 
				$( "<a>" )
					.attr( "tabIndex", -1 )
					.attr( "title", "Show All Items" )
					.tooltip()
					.appendTo( this.wrapper )
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.removeClass( "ui-corner-all" )
					.addClass( "custom-combobox-toggle")// ui-corner-right" )
					.on( "mousedown", function() {
						wasOpen = input.autocomplete( "widget" ).is( ":visible" );
					})
					.on( "click", function() {
						input.trigger( "focus" );
 
						// Close if already visible
						if ( wasOpen ) {
							return;
						}
 
						// Pass empty string as value to search for, displaying all results
						input.autocomplete( "search", "" );
					});
			},
 
			_source: function( request, response ) {
				var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
				response( this.element.children( "option" ).map(function() {
					var text = $( this ).text();
					if ( this.value && ( !request.term || matcher.test(text) ) )
						return {
							label: text,
							value: text,
							option: this
						};
				}) );
			},
 
			_removeIfInvalid: function( event, ui ) {
 
				// Selected an item, nothing to do
				if ( ui.item ) {
					return;
				}
 
				// if options is not to check validity do nothing
				if ( !this.options.validonly ) {
					return;
				}
 
				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children( "option" ).each(function() {
					if ( $( this ).text().toLowerCase() === valueLowerCase ) {
						this.selected = valid = true;
						return false;
					}
				});
 
				// Found a match, nothing to do
				if ( valid ) {
					return;
				}
 
				// Remove invalid value
				defaultval = "";
				if ( !this.options.allowempty ){
 					defaultval = this.element.children("option").first().val();
 				}
				this.input
					.val( defaultval )
					.attr( "title", value + " didn't match any item" )
					.tooltip( "open" );
				this.element.val( defaultval );
				this._delay(function() {
					this.input.tooltip( "close" ).attr( "title", "" );
				}, 2500 );
				this.input.autocomplete( "instance" ).term = defaultval;
 
			},
 
			_destroy: function() {
				this.wrapper.remove();
				this.element.show();
			}
		});
//	} );