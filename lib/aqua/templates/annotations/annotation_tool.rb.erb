# == Description
# Performs annotation using <%=tool_model%>

class <%=tool_model%>Annotation < Annotation
	
	# If the initilizer is overwritten a call to super is neccessary to setup the VCFHEADER variable to parse a Vcf file.
	def initialize(opts = {})
		super # neccessary to setup @VCFHEADER
		## check setup vep file
	end
	
	def self.ready?
		ready = super
		ready
	end
	
	# Executes annotation
	# == Parameters
	# [file_path] file to the minimal vcf/csv file containing missing variants
	# [input_vcf] VcfFile objects with the current vcf files
	def perform_annotation(file_path, input_vcf)
		output_file = nil
		begin
			species      = input_vcf.organism.name
			species_name = species.downcase.gsub(" ", "_")
			log_file       = File.join(Rails.root, "log", "<%=tool_name%>_annotation.log")
			error_log_file = File.join(Rails.root, "log", "<%=tool_name%>_annotation.error.log")
			output_file = do_annotation(file_path)
			if output_file.nil?
				raise Exception.new("Annotatil failed.")
			end
			d "Annotation finished at #{Time.now}"
		rescue => e
			self.class.log_fatal("#{e.message}: #{e.backtrace.pretty_print_inspect}")
			raise
		end
		return output_file
	end
	
	def do_annotation(file)
		# do everything you need to do to perform the annotaiton
		outfile = "#{file}.output"
		success = false
		return nil if !success
		outfile
	end
	
	# Executes storing procedures
	# == Parameters
	# [result] the result output file as returned by perform_annotation
	# [vcf] VcfFile objects with the current vcf file
	def store(result, vcf)
		raise "Not implemented"
	end
	
	register_tool name:               :<%=tool_name%>,
				  label:              "<%=tool_name%>",
				  input:              :vcf, # can be vcf or csv
				  output:             :vcf, # can be anything really, it is mostly used if your tool returns different outpuf formats
				  supports:           [:snp, :indel, :cnv],
				  organism:           [organisms(:human), organisms(:mouse)], # other organisms can be added here
				  model:              [<%=tool_model%>],
				  include_regulatory: false, # add additional configurgation
				  active: false # use this to activate your annotation once it is ready
	
	
	# Requireed methods to load and work with configurations
	@@CKCONFIG    = nil
	@@CONFIGCACHE = {}
	# Load the configuration accoring to the Rails environment that we run under.
	def self.config(field)
		if @@CONFIGCACHE[field].nil? then
			conf = load_config()
			raise "Field #{field} not found in config for environment #{Rails.env}" if conf[field].nil?
			template             = conf[field]
			ret                  = ERB.new(template.to_yaml).result(binding)
			ret                  = YAML.load(ret)
			@@CONFIGCACHE[field] = ret
		else
			ret = @@CONFIGCACHE[field]
		end
		ret
	end
	
	def self.run(cmd, out = <%=tool_model%>Annotation.logger.instance_variable_get("@logdev").dev, err = <%=tool_model%>Annotation.logger.instance_variable_get("@logdev").dev)
	cmds   = ["set -o pipefail",
			  "PATH=$PATH:#{<%=tool_model%>Annotation.bindir}",
			  cmd]
	result = system("bash", "-c", cmds.join(";"), :out => out, :err => err)
	raise "FAILED #{cmd}" unless result.is_a?(TrueClass)
	true
	end
	
	def self.get_executable(cmd)
		tbxpath = `PATH=$PATH:#{<%=tool_model%>Annotation.bindir};which #{cmd}`.to_s.strip
		return tbxpath
	end
	
	def self.basedir
		get_dir('basedir') #CaddAnnotation.config('basedir')
	end
	
	def self.datadir(chr = nil)
		datadir = get_dir('datadir')
		datadir
	end
	
	def self.bindir
		get_dir('bindir') #
	end
	
	def self.workdir
		get_dir('workdir')
	end
	
	private
	def self.load_config(force = false)
		if @@CKCONFIG.nil? or force then
			yaml = File.join(Aqua.annotationdir ,"<%=tool_name%>", "<%=tool_name%>_config.yaml")
			raise "config #{yaml} not found" unless File.exists?(yaml)
			
			conf = YAML.load(File.open(yaml).read)
			raise "Config Environment not configured for #{Rails.env}" if conf[Rails.env].nil?
			@@CKCONFIG = conf[Rails.env]
		end
		@@CKCONFIG
	end
	
	def self.get_dir(config_name)
		dir = <%=tool_model%>Annotation.config(config_name)
		FileUtils.mkpath(dir ) unless Dir.exists?dir
		dir
	end
	
end